

services:

  backend:
    # 直接用制品仓库镜像；暂时也可在 EC2 本地 build，可用 CI 构建后推镜像到 ECR/Registry，
    # 然后这里改成 image:
    # image: <your-ecr>/yarra-backend:latest
    build:
      context: ../backend
    restart: unless-stopped
    env_file: [ ./.env.prod ]
    depends_on:
      redis:
        condition: service_started
    ports:
      - "8000:8000"
    command: >
      bash -lc "uvicorn app.main:app --host 0.0.0.0 --port 8000"
    # 如果在 ALB/Nginx 后面，去掉上面的 ports，把流量走代理/ 生产常放在 ALB/Nginx 后，无需直接暴露端口。如需直连可启用


  worker:
    # image: <your-ecr>/yarra-backend:latest
    build: { context: ../backend }
    restart: unless-stopped
    env_file: [ ./.env.prod ]
    depends_on:
      redis: { condition: service_started }
    command: ["bash","-lc","celery -A app.core.celery_app worker -l info"]


  beat:
    # image: <your-ecr>/yarra-backend:latest
    build: { context: ../backend }
    restart: unless-stopped
    env_file: [ ./.env.prod ]
    depends_on:
      redis: { condition: service_started }
    command: ["bash","-lc","celery -A app.core.celery_app beat -l info"]


  # 如有托管 Redis（ElastiCache/内网 Redis），可以删掉下面这个容器并把 REDIS_URL 指向托管地址
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    # 生产通常不对外暴露端口
    # ports: [ "6379:6379" ]

  # 可选：反向代理（若不用 ALB）
  # nginx:
  #   image: nginx:1.27-alpine
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     backend:
  #       condition: service_started
  #   ports:
  #     - "80:80"
  #     - "443:443"
